{"ast":null,"code":"import { Injectable, Inject, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { ReplaySubject, AsyncSubject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { __awaiter } from 'tslib';\nclass BaseLoginProvider {\n  constructor() {}\n  loadScript(id, src, onload, parentElement = null) {\n    // get document if platform is only browser\n    if (typeof document !== 'undefined' && !document.getElementById(id)) {\n      let signInJS = document.createElement('script');\n      signInJS.async = true;\n      signInJS.src = src;\n      signInJS.onload = onload;\n      if (!parentElement) {\n        parentElement = document.head;\n      }\n      parentElement.appendChild(signInJS);\n    }\n  }\n}\nclass SocialUser {}\nclass GoogleLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    scope: 'email'\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n  }\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://apis.google.com/js/platform.js', () => {\n          gapi.load('auth2', () => {\n            this.auth2 = gapi.auth2.init(Object.assign(Object.assign({}, this.initOptions), {\n              client_id: this.clientId\n            }));\n            this.auth2.then(() => {\n              resolve();\n            }).catch(err => {\n              reject(err);\n            });\n          });\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n  getLoginStatus(loginStatusOptions) {\n    const options = Object.assign(Object.assign({}, this.initOptions), loginStatusOptions);\n    return new Promise((resolve, reject) => {\n      if (this.auth2.isSignedIn.get()) {\n        let user = new SocialUser();\n        const profile = this.auth2.currentUser.get().getBasicProfile();\n        const authResponse = this.auth2.currentUser.get().getAuthResponse(true); // get complete authResponse object\n        user.id = profile.getId();\n        user.name = profile.getName();\n        user.email = profile.getEmail();\n        user.photoUrl = profile.getImageUrl();\n        user.firstName = profile.getGivenName();\n        user.lastName = profile.getFamilyName();\n        user.response = authResponse;\n        const resolveUser = authResponse => {\n          user.authToken = authResponse.access_token;\n          user.idToken = authResponse.id_token;\n          resolve(user);\n        };\n        if (options.refreshToken) {\n          this.auth2.currentUser.get().reloadAuthResponse().then(resolveUser);\n        } else {\n          const authResponse = this.auth2.currentUser.get().getAuthResponse(true);\n          resolveUser(authResponse);\n        }\n      } else {\n        reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\n      }\n    });\n  }\n  signIn(signInOptions) {\n    const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n    return new Promise((resolve, reject) => {\n      const offlineAccess = options && options.offline_access;\n      let promise = !offlineAccess ? this.auth2.signIn(signInOptions) : this.auth2.grantOfflineAccess(signInOptions);\n      promise.then(response => {\n        let user = new SocialUser();\n        if (response && response.code) {\n          user.authorizationCode = response.code;\n        } else {\n          let profile = this.auth2.currentUser.get().getBasicProfile();\n          let authResponse = this.auth2.currentUser.get().getAuthResponse(true);\n          let token = authResponse.access_token;\n          let backendToken = authResponse.id_token;\n          user.id = profile.getId();\n          user.name = profile.getName();\n          user.email = profile.getEmail();\n          user.photoUrl = profile.getImageUrl();\n          user.firstName = profile.getGivenName();\n          user.lastName = profile.getFamilyName();\n          user.authToken = token;\n          user.idToken = backendToken;\n          user.response = authResponse;\n        }\n        resolve(user);\n      }, closed => {\n        reject(closed);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  signOut(revoke) {\n    return new Promise((resolve, reject) => {\n      let signOutPromise;\n      if (revoke) {\n        signOutPromise = this.auth2.disconnect();\n      } else {\n        signOutPromise = this.auth2.signOut();\n      }\n      signOutPromise.then(err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n}\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n\n/**\n * The service encapsulating the social login functionality. Exposes methods like\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\n * subscribe to get the current logged in user information.\n *\n * @dynamic\n */\nclass SocialAuthService {\n  /**\n   * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\n   */\n  constructor(config) {\n    this.providers = new Map();\n    this.autoLogin = false;\n    this._user = null;\n    this._authState = new ReplaySubject(1);\n    /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n    this.initialized = false;\n    this._initState = new AsyncSubject();\n    if (config instanceof Promise) {\n      config.then(config => {\n        this.initialize(config);\n      });\n    } else {\n      this.initialize(config);\n    }\n  }\n  /** An `Observable` that one can subscribe to get the current logged in user information */\n  get authState() {\n    return this._authState.asObservable();\n  }\n  /** An `Observable` to communicate the readiness of the service and associated login providers */\n  get initState() {\n    return this._initState.asObservable();\n  }\n  initialize(config) {\n    this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\n    const {\n      onError = console.error\n    } = config;\n    config.providers.forEach(item => {\n      this.providers.set(item.id, item.provider);\n    });\n    Promise.all(Array.from(this.providers.values()).map(provider => provider.initialize())).then(() => {\n      if (this.autoLogin) {\n        const loginStatusPromises = [];\n        let loggedIn = false;\n        this.providers.forEach((provider, key) => {\n          let promise = provider.getLoginStatus();\n          loginStatusPromises.push(promise);\n          promise.then(user => {\n            user.provider = key;\n            this._user = user;\n            this._authState.next(user);\n            loggedIn = true;\n          }).catch(console.debug);\n        });\n        Promise.all(loginStatusPromises).catch(() => {\n          if (!loggedIn) {\n            this._user = null;\n            this._authState.next(null);\n          }\n        });\n      }\n    }).catch(error => {\n      onError(error);\n    }).finally(() => {\n      this.initialized = true;\n      this._initState.next(this.initialized);\n      this._initState.complete();\n    });\n  }\n  refreshAuthToken(providerId) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\n        reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n      } else {\n        const providerObject = this.providers.get(providerId);\n        if (providerObject) {\n          providerObject.getLoginStatus({\n            refreshToken: true\n          }).then(user => {\n            user.provider = providerId;\n            this._user = user;\n            this._authState.next(user);\n            resolve();\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  /**\n   * A method used to sign in a user with a specific `LoginProvider`.\n   *\n   * @param providerId Id with which the `LoginProvider` has been registered with the service\n   * @param signInOptions Optional `LoginProvider` specific arguments\n   * @returns A `Promise` that resolves to the authenticated user information\n   */\n  signIn(providerId, signInOptions) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else {\n        let providerObject = this.providers.get(providerId);\n        if (providerObject) {\n          providerObject.signIn(signInOptions).then(user => {\n            user.provider = providerId;\n            resolve(user);\n            this._user = user;\n            this._authState.next(user);\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  /**\n   * A method used to sign out the currently loggen in user.\n   *\n   * @param revoke Optional parameter to specify whether a hard sign out is to be performed\n   * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\n   */\n  signOut(revoke = false) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else if (!this._user) {\n        reject(SocialAuthService.ERR_NOT_LOGGED_IN);\n      } else {\n        let providerId = this._user.provider;\n        let providerObject = this.providers.get(providerId);\n        if (providerObject) {\n          providerObject.signOut(revoke).then(() => {\n            resolve();\n            this._user = null;\n            this._authState.next(null);\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n}\nSocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\nSocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\nSocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\nSocialAuthService.decorators = [{\n  type: Injectable\n}];\nSocialAuthService.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: ['SocialAuthServiceConfig']\n  }]\n}];\n\n/**\n * The main module of angularx-social-login library.\n */\nclass SocialLoginModule {\n  constructor(parentModule) {\n    if (parentModule) {\n      throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\n    }\n  }\n  static initialize(config) {\n    return {\n      ngModule: SocialLoginModule,\n      providers: [SocialAuthService, {\n        provide: 'SocialAuthServiceConfig',\n        useValue: config\n      }]\n    };\n  }\n}\nSocialLoginModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule],\n    providers: [SocialAuthService]\n  }]\n}];\nSocialLoginModule.ctorParameters = () => [{\n  type: SocialLoginModule,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }]\n}];\n\n// Simulates login / logout without actually requiring an Internet connection.\n//\n// Useful for certain development situations.\n//\n// For example, if you want to simulate the greatest football referee England has ever produced:\n//\n//  const dummyUser: SocialUser = {\n//     id: '0123456789',\n//     name: 'Howard Webb',\n//     email: 'howard@webb.com',\n//     firstName: 'Howard',\n//     lastName: 'Webb',\n//     authToken: 'dummyAuthToken',\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\n//     provider: 'DUMMY',\n//     idToken: 'dummyIdToken',\n//     authorizationCode: 'dummyAuthCode'\n// };\n//\n//  let config = new AuthServiceConfig([\n//  { ... },\n//  {\n//       id: DummyLoginProvider.PROVIDER_ID,\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\n//   },\n//  { ... }\n//  ]);\nclass DummyLoginProvider extends BaseLoginProvider {\n  constructor(dummy) {\n    super();\n    if (dummy) {\n      this.dummy = dummy;\n    } else {\n      this.dummy = DummyLoginProvider.DEFAULT_USER;\n    }\n    // Start not logged in\n    this.loggedIn = false;\n  }\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      if (this.loggedIn) {\n        resolve(this.dummy);\n      } else {\n        reject('No user is currently logged in.');\n      }\n    });\n  }\n  initialize() {\n    return new Promise((resolve, reject) => {\n      resolve();\n    });\n  }\n  signIn() {\n    return new Promise((resolve, reject) => {\n      this.loggedIn = true;\n      resolve(this.dummy);\n    });\n  }\n  signOut(revoke) {\n    return new Promise((resolve, reject) => {\n      this.loggedIn = false;\n      resolve();\n    });\n  }\n}\nDummyLoginProvider.PROVIDER_ID = 'DUMMY';\nDummyLoginProvider.DEFAULT_USER = {\n  id: '1234567890',\n  name: 'Mickey Mouse',\n  email: 'mickey@mouse.com',\n  firstName: 'Mickey',\n  lastName: 'Mouse',\n  authToken: 'dummyAuthToken',\n  photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\n  provider: 'DUMMY',\n  idToken: 'dummyIdToken',\n  authorizationCode: 'dummyAuthCode',\n  response: {}\n};\nclass FacebookLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    scope: 'email,public_profile',\n    locale: 'en_US',\n    fields: 'name,email,picture,first_name,last_name',\n    version: 'v4.0'\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n  }\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.initOptions.locale}/sdk.js`, () => {\n          FB.init({\n            appId: this.clientId,\n            autoLogAppEvents: true,\n            cookie: true,\n            xfbml: true,\n            version: this.initOptions.version\n          });\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      FB.getLoginStatus(response => {\n        if (response.status === 'connected') {\n          let authResponse = response.authResponse;\n          FB.api(`/me?fields=${this.initOptions.fields}`, fbUser => {\n            let user = new SocialUser();\n            user.id = fbUser.id;\n            user.name = fbUser.name;\n            user.email = fbUser.email;\n            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal&access_token=' + authResponse.accessToken;\n            user.firstName = fbUser.first_name;\n            user.lastName = fbUser.last_name;\n            user.authToken = authResponse.accessToken;\n            user.response = fbUser;\n            resolve(user);\n          });\n        } else {\n          reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\n        }\n      });\n    });\n  }\n  signIn(signInOptions) {\n    const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n    return new Promise((resolve, reject) => {\n      FB.login(response => {\n        if (response.authResponse) {\n          let authResponse = response.authResponse;\n          FB.api(`/me?fields=${options.fields}`, fbUser => {\n            let user = new SocialUser();\n            user.id = fbUser.id;\n            user.name = fbUser.name;\n            user.email = fbUser.email;\n            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\n            user.firstName = fbUser.first_name;\n            user.lastName = fbUser.last_name;\n            user.authToken = authResponse.accessToken;\n            user.response = fbUser;\n            resolve(user);\n          });\n        } else {\n          reject('User cancelled login or did not fully authorize.');\n        }\n      }, options);\n    });\n  }\n  signOut() {\n    return new Promise((resolve, reject) => {\n      FB.logout(response => {\n        resolve();\n      });\n    });\n  }\n}\nFacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\nclass AmazonLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    scope: 'profile',\n    scope_data: {\n      profile: {\n        essential: false\n      }\n    },\n    redirect_uri: location.origin\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n  }\n  initialize() {\n    let amazonRoot = null;\n    if (document) {\n      amazonRoot = document.createElement('div');\n      amazonRoot.id = 'amazon-root';\n      document.body.appendChild(amazonRoot);\n    }\n    window.onAmazonLoginReady = () => {\n      amazon.Login.setClientId(this.clientId);\n    };\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\n          resolve();\n        }, amazonRoot);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      let token = this.retrieveToken();\n      if (token) {\n        amazon.Login.retrieveProfile(token, response => {\n          if (response.success) {\n            let user = new SocialUser();\n            user.id = response.profile.CustomerId;\n            user.name = response.profile.Name;\n            user.email = response.profile.PrimaryEmail;\n            user.response = response.profile;\n            resolve(user);\n          } else {\n            reject(response.error);\n          }\n        });\n      } else {\n        reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\n      }\n    });\n  }\n  signIn(signInOptions) {\n    const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n    return new Promise((resolve, reject) => {\n      amazon.Login.authorize(options, authResponse => {\n        if (authResponse.error) {\n          reject(authResponse.error);\n        } else {\n          amazon.Login.retrieveProfile(authResponse.access_token, response => {\n            let user = new SocialUser();\n            user.id = response.profile.CustomerId;\n            user.name = response.profile.Name;\n            user.email = response.profile.PrimaryEmail;\n            user.authToken = authResponse.access_token;\n            user.response = response.profile;\n            this.persistToken(authResponse.access_token);\n            resolve(user);\n          });\n        }\n      });\n    });\n  }\n  signOut() {\n    return new Promise((resolve, reject) => {\n      try {\n        amazon.Login.logout();\n        this.clearToken();\n        resolve();\n      } catch (err) {\n        reject(err.message);\n      }\n    });\n  }\n  persistToken(token) {\n    localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\n  }\n  retrieveToken() {\n    return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n  }\n  clearToken() {\n    localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n  }\n}\nAmazonLoginProvider.PROVIDER_ID = 'AMAZON';\nclass VKLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    fields: 'photo_max,contacts',\n    version: '5.124'\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n    this.VK_API_URL = '//vk.com/js/api/openapi.js';\n    this.VK_API_GET_USER = 'users.get';\n  }\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\n          VK.init({\n            apiId: this.clientId\n          });\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n  getLoginStatus() {\n    return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));\n  }\n  signIn() {\n    return new Promise((resolve, reject) => this.signInInternal(resolve, reject));\n  }\n  signOut() {\n    return new Promise((resolve, reject) => {\n      VK.Auth.logout(response => {\n        resolve();\n      });\n    });\n  }\n  signInInternal(resolve, reject) {\n    VK.Auth.login(loginResponse => {\n      if (loginResponse.status === 'connected') {\n        this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n      }\n    });\n  }\n  getUser(userId, token, resolve) {\n    VK.Api.call(this.VK_API_GET_USER, {\n      user_id: userId,\n      fields: this.initOptions.fields,\n      v: this.initOptions.version\n    }, userResponse => {\n      resolve(this.createUser(Object.assign({}, {\n        token\n      }, userResponse.response[0])));\n    });\n  }\n  getLoginStatusInternal(resolve, reject) {\n    VK.Auth.getLoginStatus(loginResponse => {\n      if (loginResponse.status === 'connected') {\n        this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n      }\n    });\n  }\n  createUser(response) {\n    const user = new SocialUser();\n    user.id = response.id;\n    user.name = `${response.first_name} ${response.last_name}`;\n    user.photoUrl = response.photo_max;\n    user.authToken = response.token;\n    return user;\n  }\n}\nVKLoginProvider.PROVIDER_ID = 'VK';\n\n/**\n * Protocol modes supported by MSAL.\n */\nvar ProtocolMode;\n(function (ProtocolMode) {\n  ProtocolMode[\"AAD\"] = \"AAD\";\n  ProtocolMode[\"OIDC\"] = \"OIDC\";\n})(ProtocolMode || (ProtocolMode = {}));\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\n/**\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\n */\nclass MicrosoftLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = {\n      authority: COMMON_AUTHORITY,\n      scopes: ['openid', 'email', 'profile', 'User.Read'],\n      knownAuthorities: [],\n      protocolMode: ProtocolMode.AAD,\n      clientCapabilities: [],\n      cacheLocation: 'sessionStorage'\n    };\n    this.initOptions = Object.assign(Object.assign({}, this.initOptions), initOptions);\n  }\n  initialize() {\n    return new Promise((resolve, reject) => {\n      this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.js', () => {\n        var _a;\n        try {\n          const config = {\n            auth: {\n              clientId: this.clientId,\n              redirectUri: (_a = this.initOptions.redirect_uri) !== null && _a !== void 0 ? _a : location.origin,\n              authority: this.initOptions.authority,\n              knownAuthorities: this.initOptions.knownAuthorities,\n              protocolMode: this.initOptions.protocolMode,\n              clientCapabilities: this.initOptions.clientCapabilities\n            },\n            cache: !this.initOptions.cacheLocation ? null : {\n              cacheLocation: this.initOptions.cacheLocation\n            }\n          };\n          this._instance = new msal.PublicClientApplication(config);\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n  getSocialUser(loginResponse) {\n    return new Promise((resolve, reject) => {\n      //After login, use Microsoft Graph API to get user info\n      let meRequest = new XMLHttpRequest();\n      meRequest.onreadystatechange = () => {\n        if (meRequest.readyState == 4) {\n          try {\n            if (meRequest.status == 200) {\n              let userInfo = JSON.parse(meRequest.responseText);\n              let user = new SocialUser();\n              user.provider = MicrosoftLoginProvider.PROVIDER_ID;\n              user.id = loginResponse.idToken;\n              user.authToken = loginResponse.accessToken;\n              user.name = loginResponse.idTokenClaims.name;\n              user.email = loginResponse.account.username;\n              user.idToken = loginResponse.idToken;\n              user.response = loginResponse;\n              user.firstName = userInfo.givenName;\n              user.lastName = userInfo.surname;\n              resolve(user);\n            } else {\n              reject(`Error retrieving user info: ${meRequest.status}`);\n            }\n          } catch (err) {\n            reject(err);\n          }\n        }\n      };\n      //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\n      meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\n      meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\n      try {\n        meRequest.send();\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n  getLoginStatus() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const accounts = this._instance.getAllAccounts();\n      if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n        const loginResponse = yield this._instance.ssoSilent({\n          scopes: this.initOptions.scopes,\n          loginHint: accounts[0].username\n        });\n        return yield this.getSocialUser(loginResponse);\n      } else {\n        throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\n      }\n    });\n  }\n  signIn() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const loginResponse = yield this._instance.loginPopup({\n        scopes: this.initOptions.scopes\n      });\n      return yield this.getSocialUser(loginResponse);\n    });\n  }\n  signOut(revoke) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      const accounts = this._instance.getAllAccounts();\n      if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n        yield this._instance.logoutPopup({\n          account: accounts[0],\n          postLogoutRedirectUri: (_b = (_a = this.initOptions.logout_redirect_uri) !== null && _a !== void 0 ? _a : this.initOptions.redirect_uri) !== null && _b !== void 0 ? _b : location.href\n        });\n      }\n    });\n  }\n}\nMicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };","map":{"version":3,"names":["Injectable","Inject","NgModule","Optional","SkipSelf","ReplaySubject","AsyncSubject","CommonModule","__awaiter","BaseLoginProvider","constructor","loadScript","id","src","onload","parentElement","document","getElementById","signInJS","createElement","async","head","appendChild","SocialUser","GoogleLoginProvider","clientId","initOptions","scope","initialize","Promise","resolve","reject","PROVIDER_ID","gapi","load","auth2","init","Object","assign","client_id","then","catch","err","getLoginStatus","loginStatusOptions","options","isSignedIn","get","user","profile","currentUser","getBasicProfile","authResponse","getAuthResponse","getId","name","getName","email","getEmail","photoUrl","getImageUrl","firstName","getGivenName","lastName","getFamilyName","response","resolveUser","authToken","access_token","idToken","id_token","refreshToken","reloadAuthResponse","signIn","signInOptions","offlineAccess","offline_access","promise","grantOfflineAccess","code","authorizationCode","token","backendToken","closed","signOut","revoke","signOutPromise","disconnect","SocialAuthService","config","providers","Map","autoLogin","_user","_authState","initialized","_initState","authState","asObservable","initState","undefined","onError","console","error","forEach","item","set","provider","all","Array","from","values","map","loginStatusPromises","loggedIn","key","push","next","debug","finally","complete","refreshAuthToken","providerId","ERR_NOT_INITIALIZED","ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN","providerObject","ERR_LOGIN_PROVIDER_NOT_FOUND","ERR_NOT_LOGGED_IN","decorators","type","ctorParameters","args","SocialLoginModule","parentModule","Error","ngModule","provide","useValue","imports","DummyLoginProvider","dummy","DEFAULT_USER","FacebookLoginProvider","locale","fields","version","FB","appId","autoLogAppEvents","cookie","xfbml","status","api","fbUser","accessToken","first_name","last_name","login","logout","AmazonLoginProvider","scope_data","essential","redirect_uri","location","origin","amazonRoot","body","window","onAmazonLoginReady","amazon","Login","setClientId","retrieveToken","retrieveProfile","success","CustomerId","Name","PrimaryEmail","authorize","persistToken","clearToken","message","localStorage","setItem","getItem","removeItem","VKLoginProvider","VK_API_URL","VK_API_GET_USER","VK","apiId","getLoginStatusInternal","signInInternal","Auth","loginResponse","getUser","session","mid","sid","userId","Api","call","user_id","v","userResponse","createUser","photo_max","ProtocolMode","COMMON_AUTHORITY","MicrosoftLoginProvider","authority","scopes","knownAuthorities","protocolMode","AAD","clientCapabilities","cacheLocation","_a","auth","redirectUri","cache","_instance","msal","PublicClientApplication","e","getSocialUser","meRequest","XMLHttpRequest","onreadystatechange","readyState","userInfo","JSON","parse","responseText","idTokenClaims","account","username","givenName","surname","open","setRequestHeader","send","accounts","getAllAccounts","length","ssoSilent","loginHint","loginPopup","_b","logoutPopup","postLogoutRedirectUri","logout_redirect_uri","href"],"sources":["/home/erfan/Desktop/TaskManagerWebSign/node_modules/angularx-social-login/fesm2015/angularx-social-login.js"],"sourcesContent":["import { Injectable, Inject, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { ReplaySubject, AsyncSubject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { __awaiter } from 'tslib';\n\nclass BaseLoginProvider {\n    constructor() { }\n    loadScript(id, src, onload, parentElement = null) {\n        // get document if platform is only browser\n        if (typeof document !== 'undefined' && !document.getElementById(id)) {\n            let signInJS = document.createElement('script');\n            signInJS.async = true;\n            signInJS.src = src;\n            signInJS.onload = onload;\n            if (!parentElement) {\n                parentElement = document.head;\n            }\n            parentElement.appendChild(signInJS);\n        }\n    }\n}\n\nclass SocialUser {\n}\n\nclass GoogleLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = { scope: 'email' }) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = initOptions;\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://apis.google.com/js/platform.js', () => {\n                    gapi.load('auth2', () => {\n                        this.auth2 = gapi.auth2.init(Object.assign(Object.assign({}, this.initOptions), { client_id: this.clientId }));\n                        this.auth2\n                            .then(() => {\n                            resolve();\n                        })\n                            .catch((err) => {\n                            reject(err);\n                        });\n                    });\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus(loginStatusOptions) {\n        const options = Object.assign(Object.assign({}, this.initOptions), loginStatusOptions);\n        return new Promise((resolve, reject) => {\n            if (this.auth2.isSignedIn.get()) {\n                let user = new SocialUser();\n                const profile = this.auth2.currentUser.get().getBasicProfile();\n                const authResponse = this.auth2.currentUser.get().getAuthResponse(true); // get complete authResponse object\n                user.id = profile.getId();\n                user.name = profile.getName();\n                user.email = profile.getEmail();\n                user.photoUrl = profile.getImageUrl();\n                user.firstName = profile.getGivenName();\n                user.lastName = profile.getFamilyName();\n                user.response = authResponse;\n                const resolveUser = authResponse => {\n                    user.authToken = authResponse.access_token;\n                    user.idToken = authResponse.id_token;\n                    resolve(user);\n                };\n                if (options.refreshToken) {\n                    this.auth2.currentUser.get().reloadAuthResponse().then(resolveUser);\n                }\n                else {\n                    const authResponse = this.auth2.currentUser.get().getAuthResponse(true);\n                    resolveUser(authResponse);\n                }\n            }\n            else {\n                reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\n            }\n        });\n    }\n    signIn(signInOptions) {\n        const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n        return new Promise((resolve, reject) => {\n            const offlineAccess = options && options.offline_access;\n            let promise = !offlineAccess\n                ? this.auth2.signIn(signInOptions)\n                : this.auth2.grantOfflineAccess(signInOptions);\n            promise\n                .then((response) => {\n                let user = new SocialUser();\n                if (response && response.code) {\n                    user.authorizationCode = response.code;\n                }\n                else {\n                    let profile = this.auth2.currentUser.get().getBasicProfile();\n                    let authResponse = this.auth2.currentUser.get().getAuthResponse(true);\n                    let token = authResponse.access_token;\n                    let backendToken = authResponse.id_token;\n                    user.id = profile.getId();\n                    user.name = profile.getName();\n                    user.email = profile.getEmail();\n                    user.photoUrl = profile.getImageUrl();\n                    user.firstName = profile.getGivenName();\n                    user.lastName = profile.getFamilyName();\n                    user.authToken = token;\n                    user.idToken = backendToken;\n                    user.response = authResponse;\n                }\n                resolve(user);\n            }, (closed) => {\n                reject(closed);\n            })\n                .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n    signOut(revoke) {\n        return new Promise((resolve, reject) => {\n            let signOutPromise;\n            if (revoke) {\n                signOutPromise = this.auth2.disconnect();\n            }\n            else {\n                signOutPromise = this.auth2.signOut();\n            }\n            signOutPromise\n                .then((err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            })\n                .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n}\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n\n/**\n * The service encapsulating the social login functionality. Exposes methods like\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\n * subscribe to get the current logged in user information.\n *\n * @dynamic\n */\nclass SocialAuthService {\n    /**\n     * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\n     */\n    constructor(config) {\n        this.providers = new Map();\n        this.autoLogin = false;\n        this._user = null;\n        this._authState = new ReplaySubject(1);\n        /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n        this.initialized = false;\n        this._initState = new AsyncSubject();\n        if (config instanceof Promise) {\n            config.then((config) => {\n                this.initialize(config);\n            });\n        }\n        else {\n            this.initialize(config);\n        }\n    }\n    /** An `Observable` that one can subscribe to get the current logged in user information */\n    get authState() {\n        return this._authState.asObservable();\n    }\n    /** An `Observable` to communicate the readiness of the service and associated login providers */\n    get initState() {\n        return this._initState.asObservable();\n    }\n    initialize(config) {\n        this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\n        const { onError = console.error } = config;\n        config.providers.forEach((item) => {\n            this.providers.set(item.id, item.provider);\n        });\n        Promise.all(Array.from(this.providers.values()).map((provider) => provider.initialize()))\n            .then(() => {\n            if (this.autoLogin) {\n                const loginStatusPromises = [];\n                let loggedIn = false;\n                this.providers.forEach((provider, key) => {\n                    let promise = provider.getLoginStatus();\n                    loginStatusPromises.push(promise);\n                    promise\n                        .then((user) => {\n                        user.provider = key;\n                        this._user = user;\n                        this._authState.next(user);\n                        loggedIn = true;\n                    })\n                        .catch(console.debug);\n                });\n                Promise.all(loginStatusPromises).catch(() => {\n                    if (!loggedIn) {\n                        this._user = null;\n                        this._authState.next(null);\n                    }\n                });\n            }\n        })\n            .catch((error) => {\n            onError(error);\n        })\n            .finally(() => {\n            this.initialized = true;\n            this._initState.next(this.initialized);\n            this._initState.complete();\n        });\n    }\n    refreshAuthToken(providerId) {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\n            }\n            else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\n                reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n            }\n            else {\n                const providerObject = this.providers.get(providerId);\n                if (providerObject) {\n                    providerObject\n                        .getLoginStatus({ refreshToken: true })\n                        .then((user) => {\n                        user.provider = providerId;\n                        this._user = user;\n                        this._authState.next(user);\n                        resolve();\n                    })\n                        .catch((err) => {\n                        reject(err);\n                    });\n                }\n                else {\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n    /**\n     * A method used to sign in a user with a specific `LoginProvider`.\n     *\n     * @param providerId Id with which the `LoginProvider` has been registered with the service\n     * @param signInOptions Optional `LoginProvider` specific arguments\n     * @returns A `Promise` that resolves to the authenticated user information\n     */\n    signIn(providerId, signInOptions) {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\n            }\n            else {\n                let providerObject = this.providers.get(providerId);\n                if (providerObject) {\n                    providerObject\n                        .signIn(signInOptions)\n                        .then((user) => {\n                        user.provider = providerId;\n                        resolve(user);\n                        this._user = user;\n                        this._authState.next(user);\n                    })\n                        .catch((err) => {\n                        reject(err);\n                    });\n                }\n                else {\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n    /**\n     * A method used to sign out the currently loggen in user.\n     *\n     * @param revoke Optional parameter to specify whether a hard sign out is to be performed\n     * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\n     */\n    signOut(revoke = false) {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\n            }\n            else if (!this._user) {\n                reject(SocialAuthService.ERR_NOT_LOGGED_IN);\n            }\n            else {\n                let providerId = this._user.provider;\n                let providerObject = this.providers.get(providerId);\n                if (providerObject) {\n                    providerObject\n                        .signOut(revoke)\n                        .then(() => {\n                        resolve();\n                        this._user = null;\n                        this._authState.next(null);\n                    })\n                        .catch((err) => {\n                        reject(err);\n                    });\n                }\n                else {\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n}\nSocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\nSocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\nSocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\nSocialAuthService.decorators = [\n    { type: Injectable }\n];\nSocialAuthService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: ['SocialAuthServiceConfig',] }] }\n];\n\n/**\n * The main module of angularx-social-login library.\n */\nclass SocialLoginModule {\n    constructor(parentModule) {\n        if (parentModule) {\n            throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\n        }\n    }\n    static initialize(config) {\n        return {\n            ngModule: SocialLoginModule,\n            providers: [\n                SocialAuthService,\n                {\n                    provide: 'SocialAuthServiceConfig',\n                    useValue: config\n                }\n            ]\n        };\n    }\n}\nSocialLoginModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule\n                ],\n                providers: [\n                    SocialAuthService\n                ]\n            },] }\n];\nSocialLoginModule.ctorParameters = () => [\n    { type: SocialLoginModule, decorators: [{ type: Optional }, { type: SkipSelf }] }\n];\n\n// Simulates login / logout without actually requiring an Internet connection.\n//\n// Useful for certain development situations.\n//\n// For example, if you want to simulate the greatest football referee England has ever produced:\n//\n//  const dummyUser: SocialUser = {\n//     id: '0123456789',\n//     name: 'Howard Webb',\n//     email: 'howard@webb.com',\n//     firstName: 'Howard',\n//     lastName: 'Webb',\n//     authToken: 'dummyAuthToken',\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\n//     provider: 'DUMMY',\n//     idToken: 'dummyIdToken',\n//     authorizationCode: 'dummyAuthCode'\n// };\n//\n//  let config = new AuthServiceConfig([\n//  { ... },\n//  {\n//       id: DummyLoginProvider.PROVIDER_ID,\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\n//   },\n//  { ... }\n//  ]);\nclass DummyLoginProvider extends BaseLoginProvider {\n    constructor(dummy) {\n        super();\n        if (dummy) {\n            this.dummy = dummy;\n        }\n        else {\n            this.dummy = DummyLoginProvider.DEFAULT_USER;\n        }\n        // Start not logged in\n        this.loggedIn = false;\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => {\n            if (this.loggedIn) {\n                resolve(this.dummy);\n            }\n            else {\n                reject('No user is currently logged in.');\n            }\n        });\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    }\n    signIn() {\n        return new Promise((resolve, reject) => {\n            this.loggedIn = true;\n            resolve(this.dummy);\n        });\n    }\n    signOut(revoke) {\n        return new Promise((resolve, reject) => {\n            this.loggedIn = false;\n            resolve();\n        });\n    }\n}\nDummyLoginProvider.PROVIDER_ID = 'DUMMY';\nDummyLoginProvider.DEFAULT_USER = {\n    id: '1234567890',\n    name: 'Mickey Mouse',\n    email: 'mickey@mouse.com',\n    firstName: 'Mickey',\n    lastName: 'Mouse',\n    authToken: 'dummyAuthToken',\n    photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\n    provider: 'DUMMY',\n    idToken: 'dummyIdToken',\n    authorizationCode: 'dummyAuthCode',\n    response: {}\n};\n\nclass FacebookLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = {\n        scope: 'email,public_profile',\n        locale: 'en_US',\n        fields: 'name,email,picture,first_name,last_name',\n        version: 'v4.0',\n    }) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = initOptions;\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.initOptions.locale}/sdk.js`, () => {\n                    FB.init({\n                        appId: this.clientId,\n                        autoLogAppEvents: true,\n                        cookie: true,\n                        xfbml: true,\n                        version: this.initOptions.version,\n                    });\n                    resolve();\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => {\n            FB.getLoginStatus((response) => {\n                if (response.status === 'connected') {\n                    let authResponse = response.authResponse;\n                    FB.api(`/me?fields=${this.initOptions.fields}`, (fbUser) => {\n                        let user = new SocialUser();\n                        user.id = fbUser.id;\n                        user.name = fbUser.name;\n                        user.email = fbUser.email;\n                        user.photoUrl =\n                            'https://graph.facebook.com/' +\n                                fbUser.id +\n                                '/picture?type=normal&access_token=' +\n                                authResponse.accessToken;\n                        user.firstName = fbUser.first_name;\n                        user.lastName = fbUser.last_name;\n                        user.authToken = authResponse.accessToken;\n                        user.response = fbUser;\n                        resolve(user);\n                    });\n                }\n                else {\n                    reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\n                }\n            });\n        });\n    }\n    signIn(signInOptions) {\n        const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n        return new Promise((resolve, reject) => {\n            FB.login((response) => {\n                if (response.authResponse) {\n                    let authResponse = response.authResponse;\n                    FB.api(`/me?fields=${options.fields}`, (fbUser) => {\n                        let user = new SocialUser();\n                        user.id = fbUser.id;\n                        user.name = fbUser.name;\n                        user.email = fbUser.email;\n                        user.photoUrl =\n                            'https://graph.facebook.com/' +\n                                fbUser.id +\n                                '/picture?type=normal';\n                        user.firstName = fbUser.first_name;\n                        user.lastName = fbUser.last_name;\n                        user.authToken = authResponse.accessToken;\n                        user.response = fbUser;\n                        resolve(user);\n                    });\n                }\n                else {\n                    reject('User cancelled login or did not fully authorize.');\n                }\n            }, options);\n        });\n    }\n    signOut() {\n        return new Promise((resolve, reject) => {\n            FB.logout((response) => {\n                resolve();\n            });\n        });\n    }\n}\nFacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\n\nclass AmazonLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = {\n        scope: 'profile',\n        scope_data: {\n            profile: { essential: false },\n        },\n        redirect_uri: location.origin,\n    }) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = initOptions;\n    }\n    initialize() {\n        let amazonRoot = null;\n        if (document) {\n            amazonRoot = document.createElement('div');\n            amazonRoot.id = 'amazon-root';\n            document.body.appendChild(amazonRoot);\n        }\n        window.onAmazonLoginReady = () => {\n            amazon.Login.setClientId(this.clientId);\n        };\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\n                    resolve();\n                }, amazonRoot);\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => {\n            let token = this.retrieveToken();\n            if (token) {\n                amazon.Login.retrieveProfile(token, (response) => {\n                    if (response.success) {\n                        let user = new SocialUser();\n                        user.id = response.profile.CustomerId;\n                        user.name = response.profile.Name;\n                        user.email = response.profile.PrimaryEmail;\n                        user.response = response.profile;\n                        resolve(user);\n                    }\n                    else {\n                        reject(response.error);\n                    }\n                });\n            }\n            else {\n                reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\n            }\n        });\n    }\n    signIn(signInOptions) {\n        const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n        return new Promise((resolve, reject) => {\n            amazon.Login.authorize(options, (authResponse) => {\n                if (authResponse.error) {\n                    reject(authResponse.error);\n                }\n                else {\n                    amazon.Login.retrieveProfile(authResponse.access_token, (response) => {\n                        let user = new SocialUser();\n                        user.id = response.profile.CustomerId;\n                        user.name = response.profile.Name;\n                        user.email = response.profile.PrimaryEmail;\n                        user.authToken = authResponse.access_token;\n                        user.response = response.profile;\n                        this.persistToken(authResponse.access_token);\n                        resolve(user);\n                    });\n                }\n            });\n        });\n    }\n    signOut() {\n        return new Promise((resolve, reject) => {\n            try {\n                amazon.Login.logout();\n                this.clearToken();\n                resolve();\n            }\n            catch (err) {\n                reject(err.message);\n            }\n        });\n    }\n    persistToken(token) {\n        localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\n    }\n    retrieveToken() {\n        return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n    }\n    clearToken() {\n        localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n    }\n}\nAmazonLoginProvider.PROVIDER_ID = 'AMAZON';\n\nclass VKLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = {\n        fields: 'photo_max,contacts',\n        version: '5.124',\n    }) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = initOptions;\n        this.VK_API_URL = '//vk.com/js/api/openapi.js';\n        this.VK_API_GET_USER = 'users.get';\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\n                    VK.init({\n                        apiId: this.clientId,\n                    });\n                    resolve();\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));\n    }\n    signIn() {\n        return new Promise((resolve, reject) => this.signInInternal(resolve, reject));\n    }\n    signOut() {\n        return new Promise((resolve, reject) => {\n            VK.Auth.logout((response) => {\n                resolve();\n            });\n        });\n    }\n    signInInternal(resolve, reject) {\n        VK.Auth.login((loginResponse) => {\n            if (loginResponse.status === 'connected') {\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n            }\n        });\n    }\n    getUser(userId, token, resolve) {\n        VK.Api.call(this.VK_API_GET_USER, {\n            user_id: userId,\n            fields: this.initOptions.fields,\n            v: this.initOptions.version,\n        }, (userResponse) => {\n            resolve(this.createUser(Object.assign({}, { token }, userResponse.response[0])));\n        });\n    }\n    getLoginStatusInternal(resolve, reject) {\n        VK.Auth.getLoginStatus((loginResponse) => {\n            if (loginResponse.status === 'connected') {\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n            }\n        });\n    }\n    createUser(response) {\n        const user = new SocialUser();\n        user.id = response.id;\n        user.name = `${response.first_name} ${response.last_name}`;\n        user.photoUrl = response.photo_max;\n        user.authToken = response.token;\n        return user;\n    }\n}\nVKLoginProvider.PROVIDER_ID = 'VK';\n\n/**\n * Protocol modes supported by MSAL.\n */\nvar ProtocolMode;\n(function (ProtocolMode) {\n    ProtocolMode[\"AAD\"] = \"AAD\";\n    ProtocolMode[\"OIDC\"] = \"OIDC\";\n})(ProtocolMode || (ProtocolMode = {}));\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\n/**\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\n */\nclass MicrosoftLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = {\n            authority: COMMON_AUTHORITY,\n            scopes: ['openid', 'email', 'profile', 'User.Read'],\n            knownAuthorities: [],\n            protocolMode: ProtocolMode.AAD,\n            clientCapabilities: [],\n            cacheLocation: 'sessionStorage'\n        };\n        this.initOptions = Object.assign(Object.assign({}, this.initOptions), initOptions);\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.js', () => {\n                var _a;\n                try {\n                    const config = {\n                        auth: {\n                            clientId: this.clientId,\n                            redirectUri: (_a = this.initOptions.redirect_uri) !== null && _a !== void 0 ? _a : location.origin,\n                            authority: this.initOptions.authority,\n                            knownAuthorities: this.initOptions.knownAuthorities,\n                            protocolMode: this.initOptions.protocolMode,\n                            clientCapabilities: this.initOptions.clientCapabilities\n                        },\n                        cache: !this.initOptions.cacheLocation ? null : {\n                            cacheLocation: this.initOptions.cacheLocation\n                        }\n                    };\n                    this._instance = new msal.PublicClientApplication(config);\n                    resolve();\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    getSocialUser(loginResponse) {\n        return new Promise((resolve, reject) => {\n            //After login, use Microsoft Graph API to get user info\n            let meRequest = new XMLHttpRequest();\n            meRequest.onreadystatechange = () => {\n                if (meRequest.readyState == 4) {\n                    try {\n                        if (meRequest.status == 200) {\n                            let userInfo = JSON.parse(meRequest.responseText);\n                            let user = new SocialUser();\n                            user.provider = MicrosoftLoginProvider.PROVIDER_ID;\n                            user.id = loginResponse.idToken;\n                            user.authToken = loginResponse.accessToken;\n                            user.name = loginResponse.idTokenClaims.name;\n                            user.email = loginResponse.account.username;\n                            user.idToken = loginResponse.idToken;\n                            user.response = loginResponse;\n                            user.firstName = userInfo.givenName;\n                            user.lastName = userInfo.surname;\n                            resolve(user);\n                        }\n                        else {\n                            reject(`Error retrieving user info: ${meRequest.status}`);\n                        }\n                    }\n                    catch (err) {\n                        reject(err);\n                    }\n                }\n            };\n            //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\n            meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\n            meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\n            try {\n                meRequest.send();\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const accounts = this._instance.getAllAccounts();\n            if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n                const loginResponse = yield this._instance.ssoSilent({\n                    scopes: this.initOptions.scopes,\n                    loginHint: accounts[0].username\n                });\n                return yield this.getSocialUser(loginResponse);\n            }\n            else {\n                throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\n            }\n        });\n    }\n    signIn() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const loginResponse = yield this._instance.loginPopup({\n                scopes: this.initOptions.scopes\n            });\n            return yield this.getSocialUser(loginResponse);\n        });\n    }\n    signOut(revoke) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const accounts = this._instance.getAllAccounts();\n            if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n                yield this._instance.logoutPopup({\n                    account: accounts[0],\n                    postLogoutRedirectUri: (_b = (_a = this.initOptions.logout_redirect_uri) !== null && _a !== void 0 ? _a : this.initOptions.redirect_uri) !== null && _b !== void 0 ? _b : location.href\n                });\n            }\n        });\n    }\n}\nMicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}